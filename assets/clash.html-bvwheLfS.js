import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as d,o as p,c as u,a as s,b as a,d as e,w as l,e as o}from"./app-G7VSIf0C.js";const m={},v={href:"https://github.com/Dreamacro/clash",target:"_blank",rel:"noopener noreferrer"},h=s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"提示"),s("p",null,[a("以下内容写于 2023/03/15，基于 Clash 最新的版本 "),s("code",null,"v1.13.0"),a(" 编写，请注意时效性。")]),s("p",null,"阅读本文需要一定的 Linux 基础。")],-1),b=s("h2",{id:"安装-clash",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#安装-clash","aria-hidden":"true"},"#"),a(" 安装 Clash")],-1),k=s("p",null,"Linux 安装 Clash 非常简单，只需要下载可执行文件，然后添加执行权限即可。",-1),g=s("p",null,"下载 Clash",-1),_={href:"https://github.com/Dreamacro/clash/releases",target:"_blank",rel:"noopener noreferrer"},f=o('<p>根据系统和 CPU 架构下载对应的版本。</p><div class="hint-container tip"><p class="hint-container-title">`amd64` 与 `amd64-v3` 的区别</p><p><code>amd64</code> 适合所有 64 位的 x86 处理器，而 <code>amd64-v3</code> 可能在一些老旧的 CPU 无法运行。<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://github.com/Dreamacro/clash/releases/download/v1.13.0/clash-linux-amd64-v1.13.0.gz\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',3),x=o(`<li><p>解压并重命名</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gunzip clash-linux-amd64-v1.13.0.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> clash-linux-amd64-v1.13.0 clash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>添加执行权限并启动 Clash</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">chmod</span> u+x clash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./clash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,2),y=o(`<p>执行 <code>./clash</code> 之后，正常启动会输出以下内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>INFO[0000] Can&#39;t find config, create a initial config file
INFO[0000] Can&#39;t find MMDB, start download
INFO[0000] Mixed(http+socks) proxy listening at: 127.0.0.1:7890
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并在当前用户的 Home 目录下创建一个 <code>.config/clash/</code> 文件夹，然后生成 <code>config.yaml</code> 文件和下载 <code>Country.mmdb</code> 到这个文件夹里。</p><p>如果一直卡在 <code>INFO[0000] Can&#39;t find MMDB, start download</code> 没有动，需要手动下载 <code>Country.mmdb</code>，然后放到 <code>~/.config/clash/</code> 目录下。</p>`,4),C={class:"hint-container info"},I=s("p",{class:"hint-container-title"},"`Country.mmdb`",-1),w=s("p",null,[a("Clash 使用的 "),s("code",null,"Country.mmdb"),a(" 是 Maxmind 社区版的 GeoLite2 数据库。")],-1),S=s("p",null,"下载地址：",-1),T={href:"https://dev.maxmind.com/geoip/geolite2-free-geolocation-data?lang=en",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/Dreamacro/maxmind-geoip/releases",target:"_blank",rel:"noopener noreferrer"},P=s("p",null,[a("还可以使用第三方优化匹配中国 IP 的 "),s("code",null,"Country.mmdb"),a("。"),s("sup",{class:"footnote-ref"},[s("a",{href:"#footnote2"},"[2]"),s("a",{class:"footnote-anchor",id:"footnote-ref2"})])],-1),U={href:"https://github.com/Loyalsoldier/geoip",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/alecthw/mmdb_china_ip_list",target:"_blank",rel:"noopener noreferrer"},A=o(`<p>启动后如果要停止使用，使用 <code>Ctrl C</code> 结束 Clash 进程。</p><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><p><code>config.yaml</code> 中包含了 Clash 的配置以及节点的配置两部分。</p><p>使用机场提供的配置文件覆盖掉 <code>config.yaml</code>，再修改 <code>config.yaml</code> 中配置 Clash 的部分，这样 <code>config.yaml</code> 就有了两部分的配置信息。</p><details class="hint-container details"><summary>\`config.yaml\` 中配置 Clash 部分的示例</summary><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># HTTP(S) + Socks5 混合代理</span>
<span class="token key atrule">mixed-port</span><span class="token punctuation">:</span> <span class="token number">7890</span>

<span class="token comment"># mixed-port 与 port + socks-port 二者选其中一种</span>
<span class="token comment"># HTTP 代理端口</span>
<span class="token comment"># port: 7890</span>
<span class="token comment"># Socks5 代理端口</span>
<span class="token comment"># socks-port: 7891</span>

<span class="token comment"># 是否允许局域网连接</span>
<span class="token key atrule">allow-lan</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

<span class="token comment"># 代理模式 有 Global、Rule、Direct、Script 四种模式</span>
<span class="token comment"># Global 是所有的流量都走代理、Rule 是按规则分流、Direct 是所有流量直连</span>
<span class="token key atrule">mode</span><span class="token punctuation">:</span> Rule

<span class="token comment"># 日志等级</span>
<span class="token key atrule">log-level</span><span class="token punctuation">:</span> info

<span class="token comment"># 允许访问的IP</span>
<span class="token comment"># 格式为 &lt;host&gt;:&lt;port&gt;，&lt;host&gt; 可以省略。注意： \`:\` 不可省略</span>
<span class="token comment"># 0.0.0.0:9090 表示允许全部 IP 使用 9090 端口访问</span>
<span class="token key atrule">external-controller</span><span class="token punctuation">:</span> <span class="token punctuation">:</span><span class="token number">9090</span>
<span class="token comment"># 密钥</span>
<span class="token key atrule">secret</span><span class="token punctuation">:</span> 
<span class="token comment"># 存放 WebUI 的目录（绝对路径）</span>
<span class="token key atrule">external-ui</span><span class="token punctuation">:</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,5),W={href:"https://github.com/Dreamacro/clash/wiki",target:"_blank",rel:"noopener noreferrer"},L={href:"https://acl4ssr.netlify.app/",target:"_blank",rel:"noopener noreferrer"},O=s("h2",{id:"webui",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#webui","aria-hidden":"true"},"#"),a(" WebUI")],-1),R={href:"https://github.com/Dreamacro/clash-dashboard",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/haishanh/yacd",target:"_blank",rel:"noopener noreferrer"},N=s("h3",{id:"在线-webui",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#在线-webui","aria-hidden":"true"},"#"),a(" 在线 WebUI")],-1),D=s("p",null,"这两个 WebUI 都提供了在线直接使用的地址：",-1),B={href:"http://clash.razord.top/#/proxies",target:"_blank",rel:"noopener noreferrer"},G={href:"http://yacd.haishan.me/",target:"_blank",rel:"noopener noreferrer"},$=o(`<p>只需要填入对应的 Host，端口以及密钥即可直接使用。</p><p>Host，端口以及密钥在 <code>config.yaml</code> 中配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 允许访问的IP</span>
<span class="token comment"># 格式为 &lt;host&gt;:&lt;port&gt;，&lt;host&gt; 可以省略。注意： \`:\` 不可省略</span>
<span class="token comment"># 0.0.0.0:9090 表示允许全部 IP 使用 9090 端口访问</span>
<span class="token key atrule">external-controller</span><span class="token punctuation">:</span> 0.0.0.0<span class="token punctuation">:</span><span class="token number">9090</span>
<span class="token comment"># 密钥</span>
<span class="token comment"># 123456 仅为示例，为了安全请使用复杂的字符串</span>
<span class="token key atrule">secret</span><span class="token punctuation">:</span> <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改完配置后使用 <code>Ctrl C</code> 停止 Clash，然后再启动 Clash，如果输出的日志有以下内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>INFO[0000] RESTful API listening at: [::]:9090
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>就可以通过 WebUI 管理 Clash 了。</p><h3 id="本地-webui" tabindex="-1"><a class="header-anchor" href="#本地-webui" aria-hidden="true">#</a> 本地 WebUI</h3><p>如果觉得在线的不安全，或者系统无法访问网络，可以搭建本地的 WebUI。</p>`,8),F=s("p",null,[a("从 Github 拉取 WebUI 项目的 "),s("code",null,"gh-pages"),a(" 分支")],-1),M=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"git"),a(" clone "),s("span",{class:"token parameter variable"},"-b"),a(" gh-pages "),s("span",{class:"token parameter variable"},"--depth"),a(),s("span",{class:"token number"},"1"),a(` https://github.com/Dreamacro/clash-dashboard.git
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),z=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"git"),a(" clone "),s("span",{class:"token parameter variable"},"-b"),a(" gh-pages "),s("span",{class:"token parameter variable"},"--depth"),a(),s("span",{class:"token number"},"1"),a(` https://github.com/haishanh/yacd.git
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),Y=o(`<li><p>修改 <code>config.yaml</code></p><p>搭建本地 WebUI 时，只需要在 <code>config.yaml</code> 加上 <code>external-ui</code> 配置。</p><p>完整配置如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 允许访问的IP</span>
<span class="token comment"># 格式为 &lt;host&gt;:&lt;port&gt;，&lt;host&gt; 可以省略。注意： \`:\` 不可省略</span>
<span class="token comment"># 0.0.0.0:9090 表示允许全部 IP 使用 9090 端口访问</span>
<span class="token key atrule">external-controller</span><span class="token punctuation">:</span> 0.0.0.0<span class="token punctuation">:</span><span class="token number">9090</span>
<span class="token comment"># 密钥</span>
<span class="token comment"># 123456 仅为示例，为了安全请使用复杂的字符串</span>
<span class="token key atrule">secret</span><span class="token punctuation">:</span> <span class="token number">123456</span>
<span class="token comment"># 存放 WebUI 的目录（绝对路径）</span>
<span class="token key atrule">external-ui</span><span class="token punctuation">:</span> /home/wojak/clash<span class="token punctuation">-</span>dashboard/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>/home/wojak/clash-dashboard/</code> 需要替换成你电脑中 WebUI 的目录。</p></li><li><p>重启 Clash</p><p>使用 <code>Ctrl C</code> 停止 Clash 后再启动 Clash，然后在浏览器打开 <code>http://&lt;host&gt;:9090/ui</code> 访问 WebUI，<code>&lt;host&gt;</code> 部分写可以访问到当前主机的 IP。</p></li>`,2),V=o(`<h2 id="设置系统代理" tabindex="-1"><a class="header-anchor" href="#设置系统代理" aria-hidden="true">#</a> 设置系统代理</h2><p>Clash 提供了 HTTP 代理 和 Socks5 代理，默认使用混合代理 (HTTP + Socks)，端口为 7890。</p><p>可以单独配置 HTTP 代理和 Socks 代理的端口，详细看 <a href="#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">配置文件</a> 中的 <code>config.yaml</code> 示例。</p><div class="hint-container tip"><p class="hint-container-title">HTTP 代理与 Socks5 代理如何选择？</p><p>如果程序同时支持 Socks5 代理和 HTTP 代理，优先选择 Socks5 代理。</p><p>Socks5 代理速度更快，安全性更高，并且支持 UDP 协议。</p></div><p>Linux 设置系统代理是通过修改与代理相关的环境变量实现的，常用环境变量有 <code>http_proxy</code>、<code>https_proxy</code>、<code>socket_proxy</code>、<code>all_proxy</code>、<code>no_proxy</code>。</p><p>可以单独设置 <code>http_proxy</code>、<code>https_proxy</code>、<code>socket_proxy</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span>http://127.0.0.1:7890
<span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span>http://127.0.0.1:7890
<span class="token builtin class-name">export</span> <span class="token assign-left variable">socket_proxy</span><span class="token operator">=</span>socks5://127.0.0.1:7890
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以只设置 <code>all_proxy</code>：</p>`,8),j=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token builtin class-name"},"export"),a(),s("span",{class:"token assign-left variable"},"all_proxy"),s("span",{class:"token operator"},"="),a(`http://127.0.0.1:7890
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),X=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token builtin class-name"},"export"),a(),s("span",{class:"token assign-left variable"},"all_proxy"),s("span",{class:"token operator"},"="),a(`socks5://127.0.0.1:7890
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),J=o(`<p><code>no_proxy</code> 可以指定某些 IP 或域名不走系统代理，有多个时使用英文的逗号分隔。</p><p>如果你在 <code>/etc/hosts</code> 中添加了自定义的域名解析，需要将这部分域名写入到 <code>no_proxy</code> 中，让这部分域名解析的时候不走系统代理。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">no_proxy</span><span class="token operator">=</span><span class="token string">&quot;127.0.0.1,localhost&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>直接执行 <code>export</code> 语句，只会在当前终端生效，关闭当前终端或重启系统后，需要重新执行。</p><p>如果需要当前用户启动终端时生效，需要将这部分 <code>export</code> 语句加入到 <code>~/.bashrc</code> 中。</p><p>如果需要所有用户启动终端时生效，需要将这部分 <code>export</code> 语句加入到 <code>/etc/profile</code> 中。</p></div><p>设置完代理之后，可以使用 <code>curl</code> 测试是否可以科学上网了：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-L</span> --connect-timeout <span class="token number">5</span> https://www.google.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以会返回一个 HTML 页面。如果不可以，会有以下超时提示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl: (28) Connection timed out after 5000 milliseconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Linux 中并不是所有的程序都走系统代理的<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup>，对于这一部分程序，需要手动为它们设置代理。</p><p>例如，Git 是不走系统代理的，需要自己设置。</p>`,10),K=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"git"),a(" config "),s("span",{class:"token parameter variable"},"--local"),a(" http.proxy "),s("span",{class:"token string"},'"http://127.0.0.1:7890"'),a(`
`),s("span",{class:"token function"},"git"),a(" config "),s("span",{class:"token parameter variable"},"--local"),a(" https.proxy "),s("span",{class:"token string"},'"http://127.0.0.1:7890"'),a(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Q=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"git"),a(" config "),s("span",{class:"token parameter variable"},"--local"),a(" http.proxy "),s("span",{class:"token string"},'"socks5://127.0.0.1:7890"'),a(`
`),s("span",{class:"token function"},"git"),a(" config "),s("span",{class:"token parameter variable"},"--local"),a(" https.proxy "),s("span",{class:"token string"},'"socks5://127.0.0.1:7890"'),a(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Z=o(`<p>停止使用 Clash 之后，需要使用 <code>unset</code> 命令取消系统代理，否则会影响某些程序正常使用网络。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">unset</span> http_proxy
<span class="token builtin class-name">unset</span> https_proxy
<span class="token builtin class-name">unset</span> socks5_proxy
<span class="token builtin class-name">unset</span> all_proxy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="systemd" tabindex="-1"><a class="header-anchor" href="#systemd" aria-hidden="true">#</a> Systemd</h2><p>设置开机启动或者使用 <code>systemctl</code> 管理 Clash 时，需要为 Clash 创建 systemd 脚本。</p><ol><li><p>将 Clash 移动到 <code>/usr/local/bin/</code> 中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mv</span> clash /usr/local/bin/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在 <code>/etc</code> 下创建一个目录用于存放 Clash 的配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> /etc/clash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将之前的配置文件移动到新目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mv</span> ~/.config/clash/* /etc/clash/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将 WebUI 移动到新目录</p><p>如果使用本地 WebUI，需要将之前拉取的 WebUI 项目移动到 <code>/etc/clash/</code>，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> /home/wojak/clash-dashboard/ /etc/clash/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后修改 <code>config.yaml</code> 中 <code>external-ui</code>，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/clash/config.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>填入新的 WebUI 目录。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 存放 WebUI 的目录（绝对路径）</span>
<span class="token key atrule">external-ui</span><span class="token punctuation">:</span> /etc/clash/clash<span class="token punctuation">-</span>dashboard/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 <code>/etc/systemd/system/</code> 下创建 <code>clash.service</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/systemd/system/clash.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后填入以下内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[Unit]
Description=Clash
After=network.target

[Service]
Type=simple
User=root
Restart=on-failure
ExecStart=/usr/local/bin/clash -d /etc/clash/

[Install]
WantedBy=multi-user.target
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存退出后就可以使用 <code>systemctl</code> 管理 Clash 了。</p></li><li><p>使用 <code>systemctl</code> 管理 Clash</p><ul><li>启动 Clash：<code>sudo systemctl start clash</code></li><li>查看 Clash 的状态：<code>sudo systemctl status clash</code></li><li>重启 Clash：<code>sudo systemctl restart clash</code></li><li>停止 Clash：<code>sudo systemctl stop clash</code></li><li>设置开机启动：<code>sudo systemctl enable clash</code></li><li>取消开机启动：<code>sudo systemctl disable clash</code></li></ul></li></ol><h2 id="自动更新节点配置" tabindex="-1"><a class="header-anchor" href="#自动更新节点配置" aria-hidden="true">#</a> 自动更新节点配置</h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>需要先配置 <a href="#systemd">Systemd</a>，且配置文件可以直接下载使用，不需要转换格式。</p></div><p>Clash 没有自动更新节点配置的功能。可以使用 <code>corntab</code> 配合 Shell 脚本实现自动更新。</p><ol><li><p>创建自动更新脚本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /etc/clash/update.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参考自动更新脚本示例，填入脚本内容。</p><details class="hint-container details"><summary>自动更新脚本示例</summary><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env bash</span>

<span class="token comment"># Clash 配置文件路径</span>
<span class="token assign-left variable">CLASH_CONFIG</span><span class="token operator">=</span><span class="token string">&quot;/etc/clash/config.yaml&quot;</span>

<span class="token comment"># 订阅链接地址</span>
<span class="token assign-left variable">SUBSCRIBE</span><span class="token operator">=</span><span class="token string">&quot;&quot;</span>
<span class="token comment"># web-ui存放目录，留空则保持默认不修改</span>
<span class="token assign-left variable">WEB_UI</span><span class="token operator">=</span><span class="token string">&quot;&quot;</span>
<span class="token comment"># WebUI 端口，留空则保持默认不修改</span>
<span class="token assign-left variable">CONTROLLER_API_PROT</span><span class="token operator">=</span><span class="token string">&quot;&quot;</span>
<span class="token comment"># WebUI 密钥，留空则保持默认不修改</span>
<span class="token assign-left variable">SECRET</span><span class="token operator">=</span><span class="token string">&quot;&quot;</span>


<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">&quot;<span class="token variable">\${SUBSCRIBE}</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;Subscription address cannot be empty&quot;</span>
    <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">fi</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">&quot;<span class="token variable">\${CLASH_CONFIG}</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;Clash config cannot be empty&quot;</span>
    <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">fi</span>

systemctl stop clash

<span class="token function">wget</span> --no-proxy <span class="token parameter variable">-O</span> <span class="token variable">\${CLASH_CONFIG}</span> <span class="token variable">\${SUBSCRIBE}</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">\${WEB_UI}</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&quot;s?^#\\{0,1\\} \\{0,1\\}external-ui.*?external-ui: <span class="token variable">\${WEB_UI}</span>?&quot;</span> <span class="token variable">\${CLASH_CONFIG}</span>
<span class="token keyword">fi</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">\${CONTROLLER_API_PROT}</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&quot;s?^external-controller.*?external-controller: &#39;0.0.0.0:<span class="token variable">\${CONTROLLER_API_PROT}</span>&#39;?&quot;</span> <span class="token variable">\${CLASH_CONFIG}</span>
<span class="token keyword">fi</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">\${SECRET}</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&quot;s?^secret.*?secret: &#39;<span class="token variable">\${SECRET}</span>&#39;?&quot;</span> <span class="token variable">\${CLASH_CONFIG}</span>
<span class="token keyword">fi</span>

systemctl start clash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></li><li><p>添加 <code>corntab</code> 任务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> corntab <span class="token parameter variable">-u</span> root <span class="token parameter variable">-e</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在打开的编辑页面输入 <code>0 0 0 * * ? /etc/clash/update.sh</code>，然后保存退出。</p><p><code>corntab</code> 添加的新任务之后至少需要两分钟之后才会执行，可以重启 <code>corntab</code> 马上执行。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl restart cornd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="更新-clash" tabindex="-1"><a class="header-anchor" href="#更新-clash" aria-hidden="true">#</a> 更新 Clash</h2><p>下载最新版的 Clash 可执行文件，解压并重命名，添加执行权限后覆盖掉 <code>/usr/local/bin/</code> 的 Clash。</p><p>步骤参考 <a href="#%E5%AE%89%E8%A3%85-clash">安装 Clash</a>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> clash /usr/local/bin/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr class="footnotes-sep">`,14),ss={class:"footnotes"},as={class:"footnotes-list"},es={id:"footnote1",class:"footnote-item"},ns={href:"https://github.com/golang/go/wiki/MinimumRequirements#amd64",target:"_blank",rel:"noopener noreferrer"},ls=s("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),ts={id:"footnote2",class:"footnote-item"},is={href:"https://github.com/17mon/china_ip_list",target:"_blank",rel:"noopener noreferrer"},os={href:"https://www.cz88.net/",target:"_blank",rel:"noopener noreferrer"},cs={href:"https://ispip.clang.cn/",target:"_blank",rel:"noopener noreferrer"},ds=s("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1),rs={id:"footnote3",class:"footnote-item"},ps={href:"https://about.gitlab.com/blog/2021/01/27/we-need-to-talk-no-proxy/",target:"_blank",rel:"noopener noreferrer"},us=s("a",{href:"#footnote-ref3",class:"footnote-backref"},"↩︎",-1);function ms(vs,hs){const n=d("ExternalLinkIcon"),c=d("CodeTabs");return p(),u("div",null,[s("p",null,[s("a",v,[a("Clash"),e(n)]),a(" 是一个使用 Go 编写的，跨平台的，支持规则分流的代理工具。")]),h,b,k,s("ol",null,[s("li",null,[g,s("p",null,[a("下载地址："),s("a",_,[a("https://github.com/Dreamacro/clash/releases"),e(n)])]),f]),x]),y,s("div",C,[I,w,S,s("ul",null,[s("li",null,[a("Maxmind："),s("a",T,[a("GeoLite2 Free Geolocation Data"),e(n)])]),s("li",null,[a("Clash 作者的仓库："),s("a",q,[a("Dreamacro/maxmind-geoip"),e(n)])])]),P,s("ul",null,[s("li",null,[s("a",U,[a("https://github.com/Loyalsoldier/geoip"),e(n)])]),s("li",null,[s("a",E,[a("https://github.com/alecthw/mmdb_china_ip_list"),e(n)])])])]),A,s("p",null,[a("如果机场提供的配置文件不支持 Clash 使用，可以查看 "),s("a",W,[a("Clash 的 Wiki"),e(n)]),a(" 自己写一个或者使用 "),s("a",L,[a("https://acl4ssr.netlify.app/"),e(n)]),a(" 转换格式。")]),O,s("p",null,[a("Clash 的 WebUI 主要有两个，一个是 Clash 作者提供的 "),s("a",R,[a("Clash Dashboard"),e(n)]),a("，另一个是 "),s("a",H,[a("Yacd"),e(n)]),a("。")]),N,D,s("ul",null,[s("li",null,[a("Clash："),s("a",B,[a("http://clash.razord.top/"),e(n)])]),s("li",null,[a("Yacd："),s("a",G,[a("http://yacd.haishan.me/"),e(n)])])]),$,s("ol",null,[s("li",null,[F,e(c,{id:"162",data:[{id:"Clash"},{id:"Yacd"}],"tab-id":"webui"},{title0:l(({value:t,isActive:i})=>[a("Clash")]),title1:l(({value:t,isActive:i})=>[a("Yacd")]),tab0:l(({value:t,isActive:i})=>[M]),tab1:l(({value:t,isActive:i})=>[z]),_:1})]),Y]),V,e(c,{id:"222",data:[{id:"HTTP"},{id:"Socket"}],active:1},{title0:l(({value:t,isActive:i})=>[a("HTTP")]),title1:l(({value:t,isActive:i})=>[a("Socket")]),tab0:l(({value:t,isActive:i})=>[j]),tab1:l(({value:t,isActive:i})=>[X]),_:1}),J,e(c,{id:"262",data:[{id:"HTTP"},{id:"Socket"}],active:1},{title0:l(({value:t,isActive:i})=>[a("HTTP")]),title1:l(({value:t,isActive:i})=>[a("Socket")]),tab0:l(({value:t,isActive:i})=>[K]),tab1:l(({value:t,isActive:i})=>[Q]),_:1}),Z,s("section",ss,[s("ol",as,[s("li",es,[s("p",null,[a("Go 1.18 为 AMD64 引入了 4 个架构级别，在编译二进制文件时可以指定编译器使用的级别。级别不同，最后生成的二进制文件所包含的 x86 指令集会不同。更多信息查看 "),s("a",ns,[a("MinimumRequirements · golang/go Wiki"),e(n)]),a(),ls])]),s("li",ts,[s("p",null,[a("Mixmind 社区版的 GeoLite2 在匹配中国 IP 时表现并不佳，第三方个人或组织将 "),s("a",is,[a("china_ip_list"),e(n)]),a("、"),s("a",os,[a("纯真 CN"),e(n)]),a("、"),s("a",cs,[a("Clang.CN"),e(n)]),a(" 以及其他的中国 IP 列表叠加进去以提高匹配中国 IP 的表现。 "),ds])]),s("li",rs,[s("p",null,[s("a",ps,[a("We need to talk: Can we standardize NO_PROXY? | GitLab"),e(n)]),a(),us])])])])])}const gs=r(m,[["render",ms],["__file","clash.html.vue"]]);export{gs as default};
