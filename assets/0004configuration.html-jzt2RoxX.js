import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as a,o as i,c,a as e,b as t,d,e as r}from"./app-G7VSIf0C.js";const s={},p=r(`<p>Nginx 的配置文件在编译的时候通过 <code>--conf-path=PATH</code> 选项指定具体路径，默认为 <code>/usr/local/nginx/conf/nginx.conf</code>。</p><p>Nginx 配置文件的语法很简单，分为变量、注释、指令和块。</p><ul><li>变量：以 <code>$</code> 开头</li><li>注释: 以 <code>#</code> 开头，不可以跨行</li><li>指令: 语法为 <code>key value1 value2 ... ;</code>。注意，每条指令的结尾都需要有分号 <code>;</code></li><li>块: 语法为 <code>key {...}</code>。块的大括号可以换行，块里面可以嵌套其他的块</li></ul><p>Nginx 的配置文件主要有三大块组成，分别是全局块、events 块和 http 块。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>main        # 全局块，对全局生效
├── events  # events 块，配置影响 Nginx 服务器或与用户的网络连接
├── http    # http 块，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置
│   ├── upstream # upstream 块，配置后端服务器具体地址，负载均衡配置不可或缺的部分
│   ├── server   # server 块，配置虚拟主机的相关参数，一个 http 块中可以有多个 server 块
│   ├── server
│   │   ├── location  # server 块可以包含多个 location 块，location 指令用于匹配 URI
│   │   ├── location
│   │   └── ...
│   └── ...
├── stream  # stream 块，用于配置 TCU/UDP 代理
│   ├── server
│   └── ...
└── ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">块名称</p><p>上面所提到的每个块，它们的名称与官方文档中 <code>Context</code> 的值对应，其中 <code>main</code> 表示全局块。 <code>any</code> 表示所有块都可使用。</p></div><h2 id="各个块作用" tabindex="-1"><a class="header-anchor" href="#各个块作用" aria-hidden="true">#</a> 各个块作用</h2><ul><li><p>全局块：全局块由指令组成，这些指令控制整个 Nginx 服务器的行为，通常写在配置文件的开头。全局块不同于普通的块，它由配置文件中除了其他块之外的一些指令组成。</p></li><li><p>events 块：events 块用于配置 Nginx 如何处理网络连接。</p></li><li><p>http 块：http 块是 Nginx 配置文件的主要部分，包含了 HTTP 服务器设置。http 块包含一个或多个 server 块。</p></li><li><p>server 块：server 块用于定义虚拟主机，每个 server 块指定了 Nginx 如何响应特定的域名或 IP 地址的请求。server 块包含一个或多个 location 块。</p></li><li><p>location 块：location 块用于匹配特定的 URL 路径，并定义了 Nginx 如何处理这些请求。location 块可以嵌套，可以包含一个或多个 location 块。</p></li></ul><h2 id="度量单位" tabindex="-1"><a class="header-anchor" href="#度量单位" aria-hidden="true">#</a> 度量单位</h2><ul><li><p>容量单位</p><p>容量的默认单位为字节，如果一个值需要填写容量，只填数值时单位为字节。</p><ul><li>字节：512</li><li>千字节：1k 或 1K</li><li>兆字节：1m 或 1M</li><li>千兆字节：1g 或 1G</li></ul></li><li><p>时间单位</p><p>时间单位默认为毫秒（ms）。支持的简写有秒（s），分钟（m），小时（h），天（d），周（w），月（M），年（y）。这些简写支持组合使用，比如 1 天 3 小时 5 分钟 42 秒 可以写成 <code>1d 3h 5m 42s</code>。</p></li></ul><h2 id="内置变量" tabindex="-1"><a class="header-anchor" href="#内置变量" aria-hidden="true">#</a> 内置变量</h2><table><thead><tr><th>变量名</th><th>描述</th></tr></thead><tbody><tr><td>$arg_name</td><td>请求中的参数 name 的值。</td></tr><tr><td>$args</td><td>请求中的参数部分。</td></tr><tr><td>$binary_remote_addr</td><td>客户端的 IP 地址的二进制表示。</td></tr><tr><td>$body_bytes_sent</td><td>发送到客户端的字节数。</td></tr><tr><td>$bytes_sent</td><td>发送到客户端的总字节数，不包括响应头部。</td></tr><tr><td>$connection</td><td>用于该连接的连接号。</td></tr><tr><td>$connection_id</td><td>连接的唯一 ID。</td></tr><tr><td>$connection_requests</td><td>当前连接的请求数。</td></tr><tr><td>$content_length</td><td>请求中的 Content-Length 头部的值。</td></tr><tr><td>$content_type</td><td>请求中的 Content-Type 头部的值。</td></tr><tr><td>$cookie_name</td><td>请求中的 cookie name 的值。</td></tr><tr><td>$document_root</td><td>当前请求的文档根目录。</td></tr><tr><td>$document_uri</td><td>请求的 URI，与 $uri 相同。</td></tr><tr><td>$host</td><td>请求中的 Host 头部的值。</td></tr><tr><td>$hostname</td><td>服务器的主机名。</td></tr><tr><td>$http_name</td><td>请求中的 HTTP 头部 name 的值。</td></tr><tr><td>$is_args</td><td>如果请求中有参数，则为 &quot;?&quot;，否则为空字符串。</td></tr><tr><td>$limit_rate</td><td>限制速率的配置值。</td></tr><tr><td>$nginx_version</td><td>Nginx 版本号。</td></tr><tr><td>$pid</td><td>工作进程的进程 ID。</td></tr><tr><td>$query_string</td><td>请求中的查询字符串，与 $args 相同。</td></tr><tr><td>$realpath_root</td><td>用于在设置根路径时计算文件名的完整路径。</td></tr><tr><td>$remote_addr</td><td>客户端的 IP 地址。</td></tr><tr><td>$remote_port</td><td>客户端的端口号。</td></tr><tr><td>$remote_user</td><td>通过 HTTP 基本身份验证获取的用户名。</td></tr><tr><td>$request</td><td>请求的第一行。</td></tr><tr><td>$request_body</td><td>请求的主体内容。</td></tr><tr><td>$request_completion</td><td>如果请求已经完成，则为 &quot;OK&quot;，否则为空。</td></tr><tr><td>$request_filename</td><td>文件系统上的当前请求的文件路径。</td></tr><tr><td>$request_id</td><td>用于生成唯一 ID 的请求标识符。</td></tr><tr><td>$request_length</td><td>请求中的字节数，包括请求行、请求头部和请求体。</td></tr><tr><td>$request_method</td><td>HTTP 请求的方法，例如 GET、POST 等。</td></tr><tr><td>$request_time</td><td>从读取客户端数据的时间到发送最后一个字节到客户端的时间的持续时间。</td></tr><tr><td>$request_uri</td><td>请求的 URI，与 $uri 相同。</td></tr><tr><td>$scheme</td><td>请求的协议，例如 http、https 等。</td></tr><tr><td>$secure_link</td><td>安全链接的令牌或 &quot;0&quot;。</td></tr><tr><td>$sent_http_name</td><td>发送到客户端的 HTTP 头部 name 的值。</td></tr><tr><td>$server_addr</td><td>服务器的 IP 地址。</td></tr><tr><td>$server_name</td><td>当前服务器名。</td></tr><tr><td>$server_port</td><td>当前服务器的端口号。</td></tr><tr><td>$server_protocol</td><td>服务器端使用的 HTTP 协议版本。</td></tr><tr><td>$tcpinfo_rtt</td><td>连接的往返时延（RTT）。</td></tr><tr><td>$tcpinfo_rttvar</td><td>连接的 RTT 变化。</td></tr><tr><td>$tcpinfo_snd_cwnd</td><td>连接的拥塞窗口。</td></tr><tr><td>$time_iso8601</td><td>本地时间的 ISO 8601 格式的当前时间。</td></tr><tr><td>$time_local</td><td>本地时间的通用日志格式的当前时间。</td></tr><tr><td>$uri</td><td>请求中的当前 URI，不包括参数部分。</td></tr><tr><td>$variable</td><td>与指定的变量名相关联的值。</td></tr><tr><td>$sent_trailer_name</td><td>与指定的尾部字段名相关联的值。</td></tr></tbody></table><h2 id="常用指令" tabindex="-1"><a class="header-anchor" href="#常用指令" aria-hidden="true">#</a> 常用指令</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Syntax 选项中：</p><p><strong>粗体</strong>表示指令名，正常黑体表示指令中参数，<em>斜体</em>表示指令中需要根据需求填写的参数值。</p><p>使用 <code>[]</code> 括起来的参数值是可选，否则必填。<code>|</code> 表示 &#39;or&#39;，即参数值有多个选择。</p></div><p>如果一个指令可以写在多个块，在配置中每个块指定了不同的值，Nginx 会遵循就近原则。</p><hr>`,16),l={href:"https://nginx.org/en/docs/ngx_core_module.html",target:"_blank",rel:"noopener noreferrer"},h=r('<h3 id="user" tabindex="-1"><a class="header-anchor" href="#user" aria-hidden="true">#</a> user</h3><blockquote><p>Syntax: <strong>user</strong> <em>user</em> [<em>group</em>];</p><p>Default: user nobody nobody;</p><p>Context: main</p></blockquote><p>指定 Nginx 启动的 worker 进程的用户和用户组，如果用户组为空，使用与用户名相同的用户组。在编译时可以通过 <code>--user=&lt;user&gt;</code> 指定用户，<code>--group=&lt;group&gt;</code> 指定用户组。</p><h3 id="master-process" tabindex="-1"><a class="header-anchor" href="#master-process" aria-hidden="true">#</a> master_process</h3><p><strong>注意：修改这个指令需要重启 Nginx，只重载配置文件无法生效。</strong></p><blockquote><p>Syntax: <strong>master_process</strong> on | off;</p><p>Default: master_process on;</p><p>Context: main</p></blockquote><p>指定是否开启 worker 进程。</p><h3 id="worker-processes" tabindex="-1"><a class="header-anchor" href="#worker-processes" aria-hidden="true">#</a> worker_processes</h3><blockquote><p>Syntax: <strong>worker_processes</strong> <em>number</em> | auto;</p><p>Default: worker_processes 1;</p><p>Context: main</p></blockquote><p>指定 worker 进程的数量。</p><p>建议配置成 CPU 的核心数或者 <code>auto</code>，如果 <code>master_process</code> 为 off 时不生效。</p><h3 id="daemon" tabindex="-1"><a class="header-anchor" href="#daemon" aria-hidden="true">#</a> daemon</h3><p><strong>注意：修改这个指令需要重启 Nginx，只重载配置文件无法生效。</strong></p><blockquote><p>Syntax: <strong>daemon</strong> on | off;</p><p>Default: daemon on;</p><p>Context: main</p></blockquote><p>指定 Nginx 是否以守护进程的方式进行启动。</p><h3 id="pid" tabindex="-1"><a class="header-anchor" href="#pid" aria-hidden="true">#</a> pid</h3><blockquote><p>Syntax: <strong>pid</strong> <em>file</em>;</p><p>Default: pid logs/nginx.pid;</p><p>Context: main</p></blockquote><p>配置 Nginx 当前 master 进程的 PID 存放文件的路径。在编译时可以通过 <code>--pid-path=PATH</code> 指定。</p><h3 id="error-log" tabindex="-1"><a class="header-anchor" href="#error-log" aria-hidden="true">#</a> error_log</h3><blockquote><p>Syntax: <strong>error_log</strong> <em>file</em> [<em>level</em>];</p><p>Default: error_log logs/error.log error;</p><p>Context: main, http, server, location</p></blockquote><p>指定 Nginx 的错误日志文件路径。其中 <code>level</code> 的表示日志级别，可选值有 <code>debug | info | notice | warn | error | crit | alert | emerg</code>，分别表示调试、信息、通知、警告、错误、临界、警报、紧急等级。</p><div class="hint-container tip"><p class="hint-container-title">debug 级别</p><p>如果需要 Nginx 能记录 debug 级别的日志，在编译的时候需要加上 <code>--with-debug</code> 选项。</p></div><h3 id="include" tabindex="-1"><a class="header-anchor" href="#include" aria-hidden="true">#</a> include</h3><blockquote><p>Syntax: <strong>include</strong> <em>file</em>;</p><p>Default:</p><p>Context: any</p></blockquote><p>用于引入其他配置文件。</p><p>建议为将每个 server 写到一个单独的子配置文件，然后使用 <code>include</code> 指令引入到配置文件中。</p><hr><p>events 块常用指令。</p><h3 id="accept-mutex" tabindex="-1"><a class="header-anchor" href="#accept-mutex" aria-hidden="true">#</a> accept_mutex</h3><blockquote><p>Syntax: <strong>accept_mutex</strong> on | off;</p><p>Default: accept_mutex on;</p><p>Context: events</p></blockquote><p>控制 Nginx 是否开启接收互斥锁，用于控制 Nginx 处理新连接的方式。当有一个新请求时，将 <code>accept_mutex</code> 设置成 <code>on</code>，则只有一个 worker 会被唤醒并处理这个请求，设置成 <code>off</code> 时，所有的 worker 都会被唤醒，并竞争这个请求。</p><h3 id="use" tabindex="-1"><a class="header-anchor" href="#use" aria-hidden="true">#</a> use</h3><blockquote><p>Syntax: <strong>use</strong> <em>method</em>;</p><p>Default:</p><p>Context: events</p></blockquote>',33),u={href:"https://nginx.org/en/docs/events.html",target:"_blank",rel:"noopener noreferrer"},m=r('<p>一般不需要指定，Nginx 会根据系统选择最高效的方法。</p><h3 id="multi-accept" tabindex="-1"><a class="header-anchor" href="#multi-accept" aria-hidden="true">#</a> multi_accept</h3><blockquote><p>Syntax: <strong>multi_accept</strong> on | off;</p><p>Default: multi_accept off;</p><p>Context: events</p></blockquote><p>控制 worker 进程是否能够同时接受多个新连接。如果设置成 <code>on</code>，<code>worker</code> 会接受多个请求，否则一次只接受并处理一个请求，处理完后再接受一个新的请求。如果 <code>use</code> 配置中使用 <code>kqueue</code>，这个配置项会被忽略。</p><h3 id="worker-connections" tabindex="-1"><a class="header-anchor" href="#worker-connections" aria-hidden="true">#</a> worker_connections</h3><blockquote><p>Syntax: <strong>worker_connections</strong> <em>number</em>;</p><p>Default: worker_connections 512;</p><p>Context: events</p></blockquote><p>指定 worker 进程同时处理的最大连接数。这个连接数包括所有连接，即不仅是与客户端的连接，还包括与代理服务器的连接等。这个数值不能超过当前系统支持打开的最大文件句柄数。</p><hr><p>http 块常用指令。</p>',9),g={href:"https://nginx.org/en/docs/http/ngx_http_core_module.html",target:"_blank",rel:"noopener noreferrer"},_=r('<h3 id="default-type" tabindex="-1"><a class="header-anchor" href="#default-type" aria-hidden="true">#</a> default_type</h3><blockquote><p>Syntax: <strong>default_type</strong> <em>mine-type</em></p><p>Default: default_type text/plain;</p><p>Context: http, server, location</p></blockquote><p>定义 Nginx 响应客户端请求的默认 MIME 类型。</p><h3 id="access-log" tabindex="-1"><a class="header-anchor" href="#access-log" aria-hidden="true">#</a> access_log</h3>',4),x={href:"https://nginx.org/en/docs/http/ngx_http_log_module.html",target:"_blank",rel:"noopener noreferrer"},f=r('<blockquote><p>Syntax: access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]] | off;</p><p>Default: access_log logs/access_log combined;</p><p>Context: http, server, location, if in location, limit_except</p></blockquote><p>设置访问日志的路径，格式等。<code>path</code> 指定访问日志文件的路径；<code>buffer</code> 指定日志缓冲区的大小，默认为 64K；<code>gzip</code> 指定是否压缩日志，其中 <code>level</code> 可选值为 1（最快，压缩最小）到 9（最慢，压缩最大），默认为 1；<code>flush</code> 指定日志缓冲区写入到磁盘的时间间隔，<code>if</code> 定义一个条件 <code>condition</code>，满足时才记录日志。</p><p>对于使用 <code>gzip</code> 压缩的日志，可以使用 <code>zcat</code> 命令查看。</p><h3 id="log-format" tabindex="-1"><a class="header-anchor" href="#log-format" aria-hidden="true">#</a> log_format</h3><blockquote><p>Syntax: <strong>log_format</strong> <em>name</em> [escape=<em>default | json | none</em>] <em>string</em> ...;</p><p>Default: log_format combined &quot;...&quot;;</p><p>Context: http</p></blockquote><p>自定义日志格式。<code>name</code> 为自定义日志格式的名称；<code>escape</code> 指定日志内容的转义方式，默认使用 <code>default</code>；<code>string</code> 定义日志格式的字符串，可以包含变量和文本。</p><h3 id="sendfile" tabindex="-1"><a class="header-anchor" href="#sendfile" aria-hidden="true">#</a> sendfile</h3><blockquote><p>Syntax: <strong>sendfile</strong> on | off;</p><p>Default: sendfile off;</p><p>Context: http, server, location, if in location</p></blockquote><p>控制 Nginx 是否使用 <code>sendfile()</code> 传输文件。</p><p><code>sendfile()</code> 函数的作用是将文件内容直接从磁盘发送到网络套接字，而不需要经过用户空间的缓冲区。这个函数提高了文件传输的效率，减少了不必要的内存拷贝操作。</p><h3 id="keepalive-disable" tabindex="-1"><a class="header-anchor" href="#keepalive-disable" aria-hidden="true">#</a> keepalive_disable</h3><blockquote><p>Syntax: <strong>keepalive_disable</strong> none | <em>browser</em> ...;</p><p>Default: keepalive_disable msie6;</p><p>Context: http, server, location</p></blockquote><p>禁用指定浏览器的保持连接。<code>none</code> 启动与所有的浏览器保持连接，默认值为 <code>msie6</code>，禁用与旧版本 MSIE 的保持连接。<code>safari</code> 会禁用在 macOS 与类 macOS 系统的 Safari 与类 Safari 浏览器的保持连接。</p><h3 id="keepalive-requests" tabindex="-1"><a class="header-anchor" href="#keepalive-requests" aria-hidden="true">#</a> keepalive_requests</h3><blockquote><p>Syntax: <strong>keepalive_requests</strong> <em>numbers</em>;</p><p>Default: keepalive_requests 1000;</p><p>Context: http, server, location</p></blockquote><p>设置单个 keep-alive 处理的最大请求数。</p><p>一个 keep-alive 连接持续处理大量请求，可能会导致资源不均衡和性能问题。</p><h3 id="keepalive-time" tabindex="-1"><a class="header-anchor" href="#keepalive-time" aria-hidden="true">#</a> keepalive_time</h3><blockquote><p>Syntax: <strong>keepalive_time</strong> <em>tiem</em>;</p><p>Default: keepalive_time 1h;</p><p>Context: http, server, location</p></blockquote><p>设置单个 keep-alive 连接的最大保持时间。超过这个时间后，Nginx 会关闭这个连接。</p><h3 id="keepalive-timeout" tabindex="-1"><a class="header-anchor" href="#keepalive-timeout" aria-hidden="true">#</a> keepalive_timeout</h3><blockquote><p>Syntax: <strong>keepalive_timeout</strong> <em>timeout</em> [<em>header_timeout</em>]</p><p>Default: keepalive_timeout 75s;</p><p>Context: http, server, location</p></blockquote><p>设置客户端与 Nginx 保持连接的超时时间。如果在这个时间内没有新的请求，这个连接将会被关闭。<code>timeout</code> 指定超时时间，如果为 0 表示禁用 keep-alive；<code>header_timeout</code> 会在响应的 header 设置 <code>Keep-Alive: timeout=time</code>。这两个值可以不一样。</p><hr><p>server 块和 location 块的常用指令。</p><h3 id="listen" tabindex="-1"><a class="header-anchor" href="#listen" aria-hidden="true">#</a> listen</h3><h3 id="server-name" tabindex="-1"><a class="header-anchor" href="#server-name" aria-hidden="true">#</a> server_name</h3><h3 id="location" tabindex="-1"><a class="header-anchor" href="#location" aria-hidden="true">#</a> location</h3><h3 id="root" tabindex="-1"><a class="header-anchor" href="#root" aria-hidden="true">#</a> root</h3><h3 id="index" tabindex="-1"><a class="header-anchor" href="#index" aria-hidden="true">#</a> index</h3><h3 id="error-page" tabindex="-1"><a class="header-anchor" href="#error-page" aria-hidden="true">#</a> error_page</h3>',31);function b(v,k){const o=a("ExternalLinkIcon");return i(),c("div",null,[p,e("p",null,[t("全局块常用指令。全部查看官方文档："),e("a",l,[t("https://nginx.org/en/docs/ngx_core_module.html"),d(o)])]),h,e("p",null,[t("配置 Nginx 底层的 IO 多路复用模型。对于一些方法，需要在编译的时候指定是否编译该模块，具体方法以及注意事项可以查看官方文档："),e("a",u,[t("https://nginx.org/en/docs/events.html"),d(o)])]),m,e("p",null,[t("http 块核心配置指令文档："),e("a",g,[t("https://nginx.org/en/docs/http/ngx_http_core_module.html"),d(o)])]),_,e("p",null,[t("官方文档："),e("a",x,[t("https://nginx.org/en/docs/http/ngx_http_log_module.html"),d(o)])]),f])}const y=n(s,[["render",b],["__file","0004configuration.html.vue"]]);export{y as default};
