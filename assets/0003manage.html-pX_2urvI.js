import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as d,o as l,c as r,a as n,b as s,d as t,e}from"./app-G7VSIf0C.js";const c={},o=e(`<h2 id="nginx-目录结构" tabindex="-1"><a class="header-anchor" href="#nginx-目录结构" aria-hidden="true">#</a> Nginx 目录结构</h2><p>安装 Nginx 后，使用 <code>tree</code> 命令查看 Nginx 的目录结构，可以得到以下内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── client_body_temp
├── conf
│   ├── fastcgi.conf
│   ├── fastcgi.conf.default
│   ├── fastcgi_params
│   ├── fastcgi_params.default
│   ├── koi-utf
│   ├── koi-win
│   ├── mime.types
│   ├── mime.types.default
│   ├── nginx.conf
│   ├── nginx.conf.default
│   ├── scgi_params
│   ├── scgi_params.default
│   ├── uwsgi_params
│   ├── uwsgi_params.default
│   └── win-utf
├── fastcgi_temp
├── html
│   ├── 50x.html
│   └── index.html
├── logs
│   ├── access.log
│   ├── error.log
│   └── nginx.pid
├── proxy_temp
├── sbin
│   └── nginx
├── scgi_temp
└── uwsgi_temp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中最重要的有四个目录，分别是 <code>conf</code>、<code>html</code>、<code>logs</code>、<code>sbin</code>。这几个目录下的文件的作用如表所示。</p><table><thead><tr><th>目录</th><th>文件</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>conf</td><td></td><td>存放 Nginx 的配置文件</td><td>这个目录下 <code>.default</code> 结尾的文件为对应文件的备份</td></tr><tr><td></td><td>fastcgi.conf</td><td>fastcgi 相关的配置文件</td><td></td></tr><tr><td></td><td>fastcgi_params</td><td>fastcgi 的参数文件</td><td></td></tr><tr><td></td><td>scgi_params</td><td>scgi 的参数文件</td><td></td></tr><tr><td></td><td>uwsgi_params</td><td>uwsgi 的参数文件</td><td></td></tr><tr><td></td><td>mime.types</td><td>HTTP 协议中 Content-Type 的值和文件后缀名的对应关系</td><td></td></tr><tr><td></td><td>nginx.conf</td><td>Nginx 的核心配置文件</td><td></td></tr><tr><td></td><td>koi-utf, koi-win, win-utf</td><td>编码转换映射相关的配置文件</td><td>用来将一种编码转成另一种编码</td></tr><tr><td>logs</td><td></td><td>存放 PID 文件和日志文件</td><td></td></tr><tr><td></td><td>nginx.pid</td><td>启动 Nginx 后，系统生成的进程 PID 号会写入到这个文件</td><td></td></tr><tr><td></td><td>access.log</td><td>访问日志</td><td>每次访问成功都会进行记录</td></tr><tr><td></td><td>error.log</td><td>错误日志</td><td>每次访问失败都会进行记录</td></tr><tr><td>sbin</td><td></td><td>存放可执行程序文件</td><td></td></tr><tr><td></td><td>nginx</td><td>Nginx 编译后的可执行文件</td><td></td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">CGI</p><p>CGI（Common Gateway Interface，通用网关接口）是一种标准，用于在 Web 服务器和外部应用程序之间传递信息。它允许 Web 服务器调用外部程序（通常是脚本或可执行文件），并将用户的请求数据传递给这些程序，然后将程序的输出发送回客户端浏览器。</p></div><h2 id="通过信号控制-nginx" tabindex="-1"><a class="header-anchor" href="#通过信号控制-nginx" aria-hidden="true">#</a> 通过信号控制 Nginx</h2>`,7),p={href:"https://nginx.org/en/docs/control.html",target:"_blank",rel:"noopener noreferrer"},u=e(`<p>Nginx 以多进程的方式工作，其架构通常包含一个 master 进程和多个 worker 进程。master 进程用于接收控制信号并管理和监控所有的 worker 进程，通常只有 1 个。worker 进程用于处理实际的访问请求，它的数量由配置文件的配置决定，每个 worker 进程之间相互独立。</p><p>启动 Nginx 后，master 进程的 PID 会被写入到一个文件中，这个文件具体由编译 Nginx 时的 <code>--pid-path=PATH</code> 选项指定，默认在 <code>/usr/local/nginx/logs/nginx.pid</code>。除此之外，还可以通过 <code>ps -ef | grep nginx</code> 查找 master 进程的 PID。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> nginx
root        <span class="token number">3876</span>       <span class="token number">1</span>  <span class="token number">0</span> Jan27 ?        00:00:00 nginx: master process ./nginx
nobody      <span class="token number">3877</span>    <span class="token number">3876</span>  <span class="token number">0</span> Jan27 ?        00:00:00 nginx: worker process
wojak       <span class="token number">6183</span>     <span class="token number">978</span>  <span class="token number">0</span> <span class="token number">13</span>:48 pts/1    00:00:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>kill -&lt;signal&gt; &lt;PID&gt;</code> 命令给 master 进程发送信号。<code>&lt;signal&gt;</code> 选项可选的值有：</p><table><thead><tr><th>signal</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>TERM/INT</td><td>快速关闭 Nginx</td><td></td></tr><tr><td>QUIT</td><td>优雅的关闭 Nginx</td><td>所有 worker 进程停止接收新请求，处理完剩余的请求后再关闭</td></tr><tr><td>HUP</td><td>重新加载配置文件</td><td>启动应用新配置文件的 worker，优雅的关闭旧的 worker</td></tr><tr><td>USR1</td><td>重新打开日志文件</td><td>可用于日志分割</td></tr><tr><td>USR2</td><td>升级 Nginx 的可执行文件</td><td>平滑升级，升级不会造成服务中断</td></tr><tr><td>WINCH</td><td>关闭所有的 worker 进程</td><td>master 进程会保留</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">获取 Nginx 的 master 进程 PID</p><p>在编写 shell 脚本的时候，可以使用 <code>cat /usr/local/nginx/nginx.pid</code> 动态获取 Nginx 的 master 进程 PID。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">kill</span> <span class="token parameter variable">-INT</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">cat</span> /usr/local/nginx/nginx.pid<span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="升级-nginx" tabindex="-1"><a class="header-anchor" href="#升级-nginx" aria-hidden="true">#</a> 升级 Nginx</h3><p>通过 <code>USR2</code> 信号，可以实现 Nginx 的平滑升级，而不会造成服务中断。升级 Nginx 的步骤如下：</p><ol><li><p><strong>备份旧的可执行文件</strong>，然后将新的可执行文件替换旧的可执行文件</p></li><li><p>给 master 进程发送 <code>USR2</code> 的信号</p></li><li><p>master 进程会将 nginx.pid 文件重命名成 nginx.pid.oldbin</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># ll ../logs/</span>
total <span class="token number">24</span>
drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> Jan <span class="token number">28</span> <span class="token number">14</span>:58 ./
drwxr-xr-x <span class="token number">11</span> root root <span class="token number">4096</span> Jan <span class="token number">27</span> <span class="token number">18</span>:14 <span class="token punctuation">..</span>/
-rw-r--r--  <span class="token number">1</span> root root  <span class="token number">978</span> Jan <span class="token number">27</span> <span class="token number">21</span>:19 access.log
-rw-r--r--  <span class="token number">1</span> root root  <span class="token number">535</span> Jan <span class="token number">28</span> <span class="token number">14</span>:58 error.log
-rw-r--r--  <span class="token number">1</span> root root    <span class="token number">5</span> Jan <span class="token number">28</span> <span class="token number">14</span>:58 nginx.pid
-rw-r--r--  <span class="token number">1</span> root root    <span class="token number">5</span> Jan <span class="token number">28</span> <span class="token number">14</span>:53 nginx.pid.oldbin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>旧的 master 进程会启动一个新的 master 进程和 worker 进程</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># kill -USR2 6333</span>
<span class="token comment"># ps -ef | grep nginx</span>
root        <span class="token number">6333</span>       <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">14</span>:53 ?        00:00:00 nginx: master process ./nginx
nobody      <span class="token number">6334</span>    <span class="token number">6333</span>  <span class="token number">0</span> <span class="token number">14</span>:53 ?        00:00:00 nginx: worker process
root        <span class="token number">6344</span>    <span class="token number">6333</span>  <span class="token number">0</span> <span class="token number">14</span>:58 ?        00:00:00 nginx: master process ./nginx
nobody      <span class="token number">6345</span>    <span class="token number">6344</span>  <span class="token number">0</span> <span class="token number">14</span>:58 ?        00:00:00 nginx: worker process
root        <span class="token number">6347</span>    <span class="token number">6324</span>  <span class="token number">0</span> <span class="token number">14</span>:58 pts/1    00:00:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>给旧的 master 进程发送 <code>WINCH</code> 信号，停止所有旧的 worker 进程，让新的 worker 进程处理访问请求</p></li><li><p>确认升级成功后，给旧的 master 进程发送 <code>QUIT</code> 信号</p></li></ol><p>如果因为某些原因，导致新的 Nginx 无法访问，有两种选择：</p><ol><li>给旧的 master 进程发送 <code>HUP</code> 信号，旧的 master 进程会重新启动 worker 进程（不会读取新配置），处理访问请求，并给新的 master 进程发送 <code>QUIT</code> 信号，结束新的 master 进程。</li><li>给新的 master 进程发送 <code>TERM</code> 信号，新的 master 进程会立即退出，旧的 master 进程会自动启动新的 worker 进程处理访问请求。</li></ol><h2 id="通过命令控制-nginx" tabindex="-1"><a class="header-anchor" href="#通过命令控制-nginx" aria-hidden="true">#</a> 通过命令控制 Nginx</h2>`,12),m={href:"https://nginx.org/en/docs/switches.html",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>使用 <code>nginx -h</code> 查看 nginx 支持的命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># ./nginx -h</span>
nginx version: nginx/1.24.0
Usage: nginx <span class="token punctuation">[</span>-?hvVtTq<span class="token punctuation">]</span> <span class="token punctuation">[</span>-s signal<span class="token punctuation">]</span> <span class="token punctuation">[</span>-p prefix<span class="token punctuation">]</span>
             <span class="token punctuation">[</span>-e filename<span class="token punctuation">]</span> <span class="token punctuation">[</span>-c filename<span class="token punctuation">]</span> <span class="token punctuation">[</span>-g directives<span class="token punctuation">]</span>

Options:
  -?,-h         <span class="token builtin class-name">:</span> this <span class="token builtin class-name">help</span>
  <span class="token parameter variable">-v</span>            <span class="token builtin class-name">:</span> show version and <span class="token builtin class-name">exit</span>
  <span class="token parameter variable">-V</span>            <span class="token builtin class-name">:</span> show version and configure options <span class="token keyword">then</span> <span class="token builtin class-name">exit</span>
  <span class="token parameter variable">-t</span>            <span class="token builtin class-name">:</span> <span class="token builtin class-name">test</span> configuration and <span class="token builtin class-name">exit</span>
  <span class="token parameter variable">-T</span>            <span class="token builtin class-name">:</span> <span class="token builtin class-name">test</span> configuration, dump it and <span class="token builtin class-name">exit</span>
  <span class="token parameter variable">-q</span>            <span class="token builtin class-name">:</span> suppress non-error messages during configuration testing
  <span class="token parameter variable">-s</span> signal     <span class="token builtin class-name">:</span> send signal to a master process: stop, quit, reopen, reload
  <span class="token parameter variable">-p</span> prefix     <span class="token builtin class-name">:</span> <span class="token builtin class-name">set</span> prefix path <span class="token punctuation">(</span>default: /usr/local/nginx/<span class="token punctuation">)</span>
  <span class="token parameter variable">-e</span> filename   <span class="token builtin class-name">:</span> <span class="token builtin class-name">set</span> error log <span class="token function">file</span> <span class="token punctuation">(</span>default: /usr/local/nginx/logs/error.log<span class="token punctuation">)</span>
  <span class="token parameter variable">-c</span> filename   <span class="token builtin class-name">:</span> <span class="token builtin class-name">set</span> configuration <span class="token function">file</span> <span class="token punctuation">(</span>default: /usr/local/nginx/conf/nginx.conf<span class="token punctuation">)</span>
  <span class="token parameter variable">-g</span> directives <span class="token builtin class-name">:</span> <span class="token builtin class-name">set</span> global directives out of configuration <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些选项的作用如表所示。</p><table><thead><tr><th>Options</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>-?, -h</td><td>打印使用帮助</td><td></td></tr><tr><td>-v</td><td>显示版本信息并退出</td><td></td></tr><tr><td>-V</td><td>显示版本信息和编译时的配置信息并退出</td><td></td></tr><tr><td>-t</td><td>测试配置文件并退出</td><td></td></tr><tr><td>-T</td><td>测试配置文件并退出，如果配置正确，会输出配置文件到控制台</td><td></td></tr><tr><td>-q</td><td>在测试配置文件时过滤非错误信息</td><td>与 -t 配合使用</td></tr><tr><td>-s signal</td><td>给 master 进程发送信号，signal 选项有 stop, quit, reopen, reload</td><td>stop: 快速关闭，类似 <code>TERM, INT</code> 信号 <br> quit: 优雅的关闭，类似 <code>QUIT</code> 信号 <br> reopen: 重新打开日志文件，类似 <code>USR1</code> 信号 <br> reload: 重新加载配置文件, 类似 <code>HUP</code> 信号</td></tr><tr><td>-p prefix</td><td>指定 Nginx 启动时读取的安装路径</td><td></td></tr><tr><td>-e filename</td><td>指定 Nginx 启动时读写错误日志文件的路径</td><td></td></tr><tr><td>-c filename</td><td>指定 Nginx 启动时读取配置文件的路径</td><td></td></tr><tr><td>-g directives</td><td>使 Nginx 启动时补充配置文件没有的配置</td><td></td></tr></tbody></table><h2 id="配置系统服务" tabindex="-1"><a class="header-anchor" href="#配置系统服务" aria-hidden="true">#</a> 配置系统服务</h2><p>如果需要使用 <code>systemctl</code> 工具管理 Nginx，需要将 Nginx 注册成一个服务。</p><p>在 <code>/etc/systemd/system</code> 目录下，新建一个 <code>nginx.service</code> 文件，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/systemd/system/nginx/service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并添加以下内容：</p><div class="hint-container tip"><p class="hint-container-title">请根据实际情况填写以下选项</p><p><code>PIDFile</code>：Nginx 的 PID 文件的路径</p><p><code>ExecStartPre</code>：使用 <code>-t -c</code> 检查 Nginx 配置文件的正确性</p><p><code>ExecStart</code>：启动 Nginx 命令</p><p><code>ExecReload</code>：重新加载 Nginx 配置命令</p><p><code>ExecStop</code>：停止 Nginx 命令</p></div><div class="language-service line-numbers-mode" data-ext="service"><pre class="language-service"><code>[Unit]
Description=Nginx Service
Documentation=https://nginx.org/en/docs/
After=network.target

[Service]
Type=forking
PIDFile=/usr/local/nginx/logs/nginx.pid
ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf
ExecStart=/usr/local/nginx/sbin/nginx
ExecReload=/usr/local/nginx/sbin/nginx -s reload
ExecStop=/usr/local/nginx/sbin/nginx -s stop
PrivateTmp=true

[Install]
WantedBy=default.target
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后给这个文件可执行权限：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">755</span> /etc/systemd/system/nginx.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后重载 systemd 使这个 service 生效：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl daemon-reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>systemd</code> 管理 Nginx 的命令：</p><ul><li>启动 Nginx：<code>systemd start nginx</code></li><li>重启 Nginx：<code>systemd restart nginx</code></li><li>重新加载配置文件：<code>systemd reload nginx</code></li><li>停止 Nginx：<code>systemd stop nginx</code></li><li>开机启动：<code>systemd enable nginx</code></li><li>取消开机启动：<code>systemd disable nginx</code></li></ul>`,17);function b(g,k){const a=d("ExternalLinkIcon");return l(),r("div",null,[o,n("p",null,[s("官方文档："),n("a",p,[s("https://nginx.org/en/docs/control.html"),t(a)])]),u,n("p",null,[s("官方文档: "),n("a",m,[s("https://nginx.org/en/docs/switches.html"),t(a)])]),v])}const f=i(c,[["render",b],["__file","0003manage.html.vue"]]);export{f as default};
